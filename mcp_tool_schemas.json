{
  "add": {
    "description": "Add two numbers",
    "args_schema": {
      "properties": {
        "a": {
          "title": "A",
          "type": "number"
        },
        "b": {
          "title": "B",
          "type": "number"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "addArguments",
      "type": "object"
    }
  },
  "subtract": {
    "description": "Subtract two numbers",
    "args_schema": {
      "properties": {
        "a": {
          "title": "A",
          "type": "number"
        },
        "b": {
          "title": "B",
          "type": "number"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "subtractArguments",
      "type": "object"
    }
  },
  "multiply": {
    "description": "Multiply two numbers",
    "args_schema": {
      "properties": {
        "a": {
          "title": "A",
          "type": "number"
        },
        "b": {
          "title": "B",
          "type": "number"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "multiplyArguments",
      "type": "object"
    }
  },
  "divide": {
    "description": "Divide two numbers",
    "args_schema": {
      "properties": {
        "a": {
          "title": "A",
          "type": "number"
        },
        "b": {
          "title": "B",
          "type": "number"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "divideArguments",
      "type": "object"
    }
  },
  "power": {
    "description": "Raise a number to the power of another",
    "args_schema": {
      "properties": {
        "base": {
          "title": "Base",
          "type": "number"
        },
        "exponent": {
          "title": "Exponent",
          "type": "number"
        }
      },
      "required": [
        "base",
        "exponent"
      ],
      "title": "powerArguments",
      "type": "object"
    }
  },
  "nth_root": {
    "description": "Return the n-th root of a number x (e.g., n=2 means square root)",
    "args_schema": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        },
        "n": {
          "title": "N",
          "type": "number"
        }
      },
      "required": [
        "x",
        "n"
      ],
      "title": "nth_rootArguments",
      "type": "object"
    }
  },
  "log": {
    "description": "Compute logarithm of x with optional base (default: natural log)",
    "args_schema": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        },
        "base": {
          "default": 2.718281828459045,
          "title": "Base",
          "type": "number"
        }
      },
      "required": [
        "x"
      ],
      "title": "logArguments",
      "type": "object"
    }
  },
  "sin": {
    "description": "Return sine of x (in radians)",
    "args_schema": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        }
      },
      "required": [
        "x"
      ],
      "title": "sinArguments",
      "type": "object"
    }
  },
  "cos": {
    "description": "Return cosine of x (in radians)",
    "args_schema": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        }
      },
      "required": [
        "x"
      ],
      "title": "cosArguments",
      "type": "object"
    }
  },
  "tan": {
    "description": "Return tangent of x (in radians)",
    "args_schema": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        }
      },
      "required": [
        "x"
      ],
      "title": "tanArguments",
      "type": "object"
    }
  },
  "factorial": {
    "description": "Return factorial of an integer n",
    "args_schema": {
      "properties": {
        "n": {
          "title": "N",
          "type": "integer"
        }
      },
      "required": [
        "n"
      ],
      "title": "factorialArguments",
      "type": "object"
    }
  },
  "gcd": {
    "description": "Return greatest common divisor of two integers",
    "args_schema": {
      "properties": {
        "a": {
          "title": "A",
          "type": "integer"
        },
        "b": {
          "title": "B",
          "type": "integer"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "gcdArguments",
      "type": "object"
    }
  },
  "lcm": {
    "description": "Return least common multiple of two integers",
    "args_schema": {
      "properties": {
        "a": {
          "title": "A",
          "type": "integer"
        },
        "b": {
          "title": "B",
          "type": "integer"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "lcmArguments",
      "type": "object"
    }
  },
  "mod": {
    "description": "Return a modulo b",
    "args_schema": {
      "properties": {
        "a": {
          "title": "A",
          "type": "integer"
        },
        "b": {
          "title": "B",
          "type": "integer"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "modArguments",
      "type": "object"
    }
  },
  "floor": {
    "description": "Return the largest integer less than or equal to x",
    "args_schema": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        }
      },
      "required": [
        "x"
      ],
      "title": "floorArguments",
      "type": "object"
    }
  },
  "ceil": {
    "description": "Return the smallest integer greater than or equal to x",
    "args_schema": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        }
      },
      "required": [
        "x"
      ],
      "title": "ceilArguments",
      "type": "object"
    }
  },
  "round_num": {
    "description": "Round a number to the given number of digits (default 0)",
    "args_schema": {
      "properties": {
        "x": {
          "title": "X",
          "type": "number"
        },
        "ndigits": {
          "default": 0,
          "title": "Ndigits",
          "type": "integer"
        }
      },
      "required": [
        "x"
      ],
      "title": "round_numArguments",
      "type": "object"
    }
  },
  "matrix_add": {
    "description": "矩阵加法",
    "args_schema": {
      "properties": {
        "a": {
          "items": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "title": "A",
          "type": "array"
        },
        "b": {
          "items": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "title": "B",
          "type": "array"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "matrix_addArguments",
      "type": "object"
    }
  },
  "matrix_multiply": {
    "description": "矩阵乘法",
    "args_schema": {
      "properties": {
        "a": {
          "items": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "title": "A",
          "type": "array"
        },
        "b": {
          "items": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "title": "B",
          "type": "array"
        }
      },
      "required": [
        "a",
        "b"
      ],
      "title": "matrix_multiplyArguments",
      "type": "object"
    }
  },
  "matrix_transpose": {
    "description": "矩阵转置",
    "args_schema": {
      "properties": {
        "a": {
          "items": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "title": "A",
          "type": "array"
        }
      },
      "required": [
        "a"
      ],
      "title": "matrix_transposeArguments",
      "type": "object"
    }
  },
  "matrix_inverse": {
    "description": "矩阵求逆（限方阵）",
    "args_schema": {
      "properties": {
        "a": {
          "items": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "title": "A",
          "type": "array"
        }
      },
      "required": [
        "a"
      ],
      "title": "matrix_inverseArguments",
      "type": "object"
    }
  },
  "matrix_determinant": {
    "description": "矩阵行列式",
    "args_schema": {
      "properties": {
        "a": {
          "items": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "title": "A",
          "type": "array"
        }
      },
      "required": [
        "a"
      ],
      "title": "matrix_determinantArguments",
      "type": "object"
    }
  },
  "derivative": {
    "description": "对表达式 expr 对变量 var 求导",
    "args_schema": {
      "properties": {
        "expr": {
          "title": "Expr",
          "type": "string"
        },
        "var": {
          "default": "x",
          "title": "Var",
          "type": "string"
        }
      },
      "required": [
        "expr"
      ],
      "title": "derivativeArguments",
      "type": "object"
    }
  },
  "integral": {
    "description": "对表达式 expr 对变量 var 求不定积分",
    "args_schema": {
      "properties": {
        "expr": {
          "title": "Expr",
          "type": "string"
        },
        "var": {
          "default": "x",
          "title": "Var",
          "type": "string"
        }
      },
      "required": [
        "expr"
      ],
      "title": "integralArguments",
      "type": "object"
    }
  },
  "definite_integral": {
    "description": "对表达式 expr 在区间 [lower, upper] 对变量 var 求定积分",
    "args_schema": {
      "properties": {
        "expr": {
          "title": "Expr",
          "type": "string"
        },
        "var": {
          "default": "x",
          "title": "Var",
          "type": "string"
        },
        "lower": {
          "default": 0,
          "title": "Lower",
          "type": "number"
        },
        "upper": {
          "default": 1,
          "title": "Upper",
          "type": "number"
        }
      },
      "required": [
        "expr"
      ],
      "title": "definite_integralArguments",
      "type": "object"
    }
  },
  "solve_equation": {
    "description": "求解一个代数方程，例如 'x**2 - 2 = 0'",
    "args_schema": {
      "properties": {
        "equation": {
          "title": "Equation",
          "type": "string"
        },
        "var": {
          "default": "x",
          "title": "Var",
          "type": "string"
        }
      },
      "required": [
        "equation"
      ],
      "title": "solve_equationArguments",
      "type": "object"
    }
  },
  "get_current_weather": {
    "description": "\n    获取当前天气信息\n    :param city: 城市名称\n    :return: 当前天气信息字符串\n    ",
    "args_schema": {
      "properties": {
        "city": {
          "title": "City",
          "type": "string"
        }
      },
      "required": [
        "city"
      ],
      "title": "get_current_weatherArguments",
      "type": "object"
    }
  },
  "get_forecast_weather": {
    "description": "\n    获取天气预报信息\n    :param city: 城市名称\n    :return: 天气预报信息字符串\n    ",
    "args_schema": {
      "properties": {
        "city": {
          "title": "City",
          "type": "string"
        }
      },
      "required": [
        "city"
      ],
      "title": "get_forecast_weatherArguments",
      "type": "object"
    }
  },
  "maps_regeocode": {
    "description": "将一个高德经纬度坐标转换为行政区划地址信息",
    "args_schema": {
      "properties": {
        "location": {
          "title": "Location",
          "type": "string"
        }
      },
      "required": [
        "location"
      ],
      "title": "maps_regeocodeArguments",
      "type": "object"
    }
  },
  "maps_geo": {
    "description": "将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标",
    "args_schema": {
      "properties": {
        "address": {
          "title": "Address",
          "type": "string"
        },
        "city": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "City"
        }
      },
      "required": [
        "address"
      ],
      "title": "maps_geoArguments",
      "type": "object"
    }
  },
  "maps_ip_location": {
    "description": "IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置",
    "args_schema": {
      "properties": {
        "ip": {
          "title": "Ip",
          "type": "string"
        }
      },
      "required": [
        "ip"
      ],
      "title": "maps_ip_locationArguments",
      "type": "object"
    }
  },
  "maps_bicycling_by_address": {
    "description": "Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\")\n        destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ",
    "args_schema": {
      "properties": {
        "origin_address": {
          "title": "Origin Address",
          "type": "string"
        },
        "destination_address": {
          "title": "Destination Address",
          "type": "string"
        },
        "origin_city": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Origin City"
        },
        "destination_city": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Destination City"
        }
      },
      "required": [
        "origin_address",
        "destination_address"
      ],
      "title": "maps_bicycling_by_addressArguments",
      "type": "object"
    }
  },
  "maps_bicycling_by_coordinates": {
    "description": "Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format \"longitude,latitude\" (e.g. \"116.434307,39.90909\")\n        destination_coordinates (str): Ending point coordinates in the format \"longitude,latitude\" (e.g. \"116.434307,39.90909\")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ",
    "args_schema": {
      "properties": {
        "origin_coordinates": {
          "title": "Origin Coordinates",
          "type": "string"
        },
        "destination_coordinates": {
          "title": "Destination Coordinates",
          "type": "string"
        }
      },
      "required": [
        "origin_coordinates",
        "destination_coordinates"
      ],
      "title": "maps_bicycling_by_coordinatesArguments",
      "type": "object"
    }
  },
  "maps_direction_walking_by_address": {
    "description": "Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\")\n        destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ",
    "args_schema": {
      "properties": {
        "origin_address": {
          "title": "Origin Address",
          "type": "string"
        },
        "destination_address": {
          "title": "Destination Address",
          "type": "string"
        },
        "origin_city": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Origin City"
        },
        "destination_city": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Destination City"
        }
      },
      "required": [
        "origin_address",
        "destination_address"
      ],
      "title": "maps_direction_walking_by_addressArguments",
      "type": "object"
    }
  },
  "maps_direction_walking_by_coordinates": {
    "description": "步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ",
    "args_schema": {
      "properties": {
        "origin": {
          "title": "Origin",
          "type": "string"
        },
        "destination": {
          "title": "Destination",
          "type": "string"
        }
      },
      "required": [
        "origin",
        "destination"
      ],
      "title": "maps_direction_walking_by_coordinatesArguments",
      "type": "object"
    }
  },
  "maps_direction_driving_by_address": {
    "description": "Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\")\n        destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ",
    "args_schema": {
      "properties": {
        "origin_address": {
          "title": "Origin Address",
          "type": "string"
        },
        "destination_address": {
          "title": "Destination Address",
          "type": "string"
        },
        "origin_city": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Origin City"
        },
        "destination_city": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Destination City"
        }
      },
      "required": [
        "origin_address",
        "destination_address"
      ],
      "title": "maps_direction_driving_by_addressArguments",
      "type": "object"
    }
  },
  "maps_direction_driving_by_coordinates": {
    "description": "驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ",
    "args_schema": {
      "properties": {
        "origin": {
          "title": "Origin",
          "type": "string"
        },
        "destination": {
          "title": "Destination",
          "type": "string"
        }
      },
      "required": [
        "origin",
        "destination"
      ],
      "title": "maps_direction_driving_by_coordinatesArguments",
      "type": "object"
    }
  },
  "maps_direction_transit_integrated_by_address": {
    "description": "Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\")\n        destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ",
    "args_schema": {
      "properties": {
        "origin_address": {
          "title": "Origin Address",
          "type": "string"
        },
        "destination_address": {
          "title": "Destination Address",
          "type": "string"
        },
        "origin_city": {
          "title": "Origin City",
          "type": "string"
        },
        "destination_city": {
          "title": "Destination City",
          "type": "string"
        }
      },
      "required": [
        "origin_address",
        "destination_address",
        "origin_city",
        "destination_city"
      ],
      "title": "maps_direction_transit_integrated_by_addressArguments",
      "type": "object"
    }
  },
  "maps_direction_transit_integrated_by_coordinates": {
    "description": "根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ",
    "args_schema": {
      "properties": {
        "origin": {
          "title": "Origin",
          "type": "string"
        },
        "destination": {
          "title": "Destination",
          "type": "string"
        },
        "city": {
          "title": "City",
          "type": "string"
        },
        "cityd": {
          "title": "Cityd",
          "type": "string"
        }
      },
      "required": [
        "origin",
        "destination",
        "city",
        "cityd"
      ],
      "title": "maps_direction_transit_integrated_by_coordinatesArguments",
      "type": "object"
    }
  },
  "maps_distance": {
    "description": "测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量",
    "args_schema": {
      "properties": {
        "origins": {
          "title": "Origins",
          "type": "string"
        },
        "destination": {
          "title": "Destination",
          "type": "string"
        },
        "type": {
          "default": "1",
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "origins",
        "destination"
      ],
      "title": "maps_distanceArguments",
      "type": "object"
    }
  },
  "maps_text_search": {
    "description": "关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息",
    "args_schema": {
      "properties": {
        "keywords": {
          "title": "Keywords",
          "type": "string"
        },
        "city": {
          "default": "",
          "title": "City",
          "type": "string"
        },
        "citylimit": {
          "default": "false",
          "title": "Citylimit",
          "type": "string"
        }
      },
      "required": [
        "keywords"
      ],
      "title": "maps_text_searchArguments",
      "type": "object"
    }
  },
  "maps_around_search": {
    "description": "周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI",
    "args_schema": {
      "properties": {
        "location": {
          "title": "Location",
          "type": "string"
        },
        "radius": {
          "default": "1000",
          "title": "Radius",
          "type": "string"
        },
        "keywords": {
          "default": "",
          "title": "Keywords",
          "type": "string"
        }
      },
      "required": [
        "location"
      ],
      "title": "maps_around_searchArguments",
      "type": "object"
    }
  },
  "maps_search_detail": {
    "description": "查询关键词搜或者周边搜获取到的POI ID的详细信息",
    "args_schema": {
      "properties": {
        "id": {
          "title": "Id",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "maps_search_detailArguments",
      "type": "object"
    }
  },
  "firecrawl_scrape": {
    "description": "\nScrape content from a single URL with advanced options. \nThis is the most powerful, fastest and most reliable scraper tool, if available you should always default to using this tool for any web scraping needs.\n\n**Best for:** Single page content extraction, when you know exactly which page contains the information.\n**Not recommended for:** Multiple pages (use batch_scrape), unknown page (use search), structured data (use extract).\n**Common mistakes:** Using scrape for a list of URLs (use batch_scrape instead). If batch scrape doesnt work, just use scrape and call it multiple times.\n**Prompt Example:** \"Get the content of the page at https://example.com.\"\n**Usage Example:**\n```json\n{\n  \"name\": \"firecrawl_scrape\",\n  \"arguments\": {\n    \"url\": \"https://example.com\",\n    \"formats\": [\"markdown\"],\n    \"maxAge\": 3600000\n  }\n}\n```\n**Performance:** Add maxAge parameter for 500% faster scrapes using cached data.\n**Returns:** Markdown, HTML, or other formats as specified.\n",
    "args_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to scrape"
        },
        "formats": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "markdown",
              "html",
              "rawHtml",
              "screenshot",
              "links",
              "screenshot@fullPage",
              "extract"
            ]
          },
          "default": [
            "markdown"
          ],
          "description": "Content formats to extract (default: ['markdown'])"
        },
        "onlyMainContent": {
          "type": "boolean",
          "description": "Extract only the main content, filtering out navigation, footers, etc."
        },
        "includeTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "HTML tags to specifically include in extraction"
        },
        "excludeTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "HTML tags to exclude from extraction"
        },
        "waitFor": {
          "type": "number",
          "description": "Time in milliseconds to wait for dynamic content to load"
        },
        "timeout": {
          "type": "number",
          "description": "Maximum time in milliseconds to wait for the page to load"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "wait",
                  "click",
                  "screenshot",
                  "write",
                  "press",
                  "scroll",
                  "scrape",
                  "executeJavascript"
                ],
                "description": "Type of action to perform"
              },
              "selector": {
                "type": "string",
                "description": "CSS selector for the target element"
              },
              "milliseconds": {
                "type": "number",
                "description": "Time to wait in milliseconds (for wait action)"
              },
              "text": {
                "type": "string",
                "description": "Text to write (for write action)"
              },
              "key": {
                "type": "string",
                "description": "Key to press (for press action)"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ],
                "description": "Scroll direction"
              },
              "script": {
                "type": "string",
                "description": "JavaScript code to execute"
              },
              "fullPage": {
                "type": "boolean",
                "description": "Take full page screenshot"
              }
            },
            "required": [
              "type"
            ]
          },
          "description": "List of actions to perform before scraping"
        },
        "extract": {
          "type": "object",
          "properties": {
            "schema": {
              "type": "object",
              "description": "Schema for structured data extraction"
            },
            "systemPrompt": {
              "type": "string",
              "description": "System prompt for LLM extraction"
            },
            "prompt": {
              "type": "string",
              "description": "User prompt for LLM extraction"
            }
          },
          "description": "Configuration for structured data extraction"
        },
        "mobile": {
          "type": "boolean",
          "description": "Use mobile viewport"
        },
        "skipTlsVerification": {
          "type": "boolean",
          "description": "Skip TLS certificate verification"
        },
        "removeBase64Images": {
          "type": "boolean",
          "description": "Remove base64 encoded images from output"
        },
        "location": {
          "type": "object",
          "properties": {
            "country": {
              "type": "string",
              "description": "Country code for geolocation"
            },
            "languages": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Language codes for content"
            }
          },
          "description": "Location settings for scraping"
        },
        "maxAge": {
          "type": "number",
          "description": "Maximum age in milliseconds for cached content. Use cached data if available and younger than maxAge, otherwise scrape fresh. Enables 500% faster scrapes for recently cached pages. Default: 0 (always scrape fresh)"
        }
      },
      "required": [
        "url"
      ]
    }
  },
  "firecrawl_map": {
    "description": "\nMap a website to discover all indexed URLs on the site.\n\n**Best for:** Discovering URLs on a website before deciding what to scrape; finding specific sections of a website.\n**Not recommended for:** When you already know which specific URL you need (use scrape or batch_scrape); when you need the content of the pages (use scrape after mapping).\n**Common mistakes:** Using crawl to discover URLs instead of map.\n**Prompt Example:** \"List all URLs on example.com.\"\n**Usage Example:**\n```json\n{\n  \"name\": \"firecrawl_map\",\n  \"arguments\": {\n    \"url\": \"https://example.com\"\n  }\n}\n```\n**Returns:** Array of URLs found on the site.\n",
    "args_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Starting URL for URL discovery"
        },
        "search": {
          "type": "string",
          "description": "Optional search term to filter URLs"
        },
        "ignoreSitemap": {
          "type": "boolean",
          "description": "Skip sitemap.xml discovery and only use HTML links"
        },
        "sitemapOnly": {
          "type": "boolean",
          "description": "Only use sitemap.xml for discovery, ignore HTML links"
        },
        "includeSubdomains": {
          "type": "boolean",
          "description": "Include URLs from subdomains in results"
        },
        "limit": {
          "type": "number",
          "description": "Maximum number of URLs to return"
        }
      },
      "required": [
        "url"
      ]
    }
  },
  "firecrawl_crawl": {
    "description": "\nStarts an asynchronous crawl job on a website and extracts content from all pages.\n\n**Best for:** Extracting content from multiple related pages, when you need comprehensive coverage.\n**Not recommended for:** Extracting content from a single page (use scrape); when token limits are a concern (use map + batch_scrape); when you need fast results (crawling can be slow).\n**Warning:** Crawl responses can be very large and may exceed token limits. Limit the crawl depth and number of pages, or use map + batch_scrape for better control.\n**Common mistakes:** Setting limit or maxDepth too high (causes token overflow); using crawl for a single page (use scrape instead).\n**Prompt Example:** \"Get all blog posts from the first two levels of example.com/blog.\"\n**Usage Example:**\n```json\n{\n  \"name\": \"firecrawl_crawl\",\n  \"arguments\": {\n    \"url\": \"https://example.com/blog/*\",\n    \"maxDepth\": 2,\n    \"limit\": 100,\n    \"allowExternalLinks\": false,\n    \"deduplicateSimilarURLs\": true\n  }\n}\n```\n**Returns:** Operation ID for status checking; use firecrawl_check_crawl_status to check progress.\n",
    "args_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Starting URL for the crawl"
        },
        "excludePaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "URL paths to exclude from crawling"
        },
        "includePaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Only crawl these URL paths"
        },
        "maxDepth": {
          "type": "number",
          "description": "Maximum link depth to crawl"
        },
        "ignoreSitemap": {
          "type": "boolean",
          "description": "Skip sitemap.xml discovery"
        },
        "limit": {
          "type": "number",
          "description": "Maximum number of pages to crawl"
        },
        "allowBackwardLinks": {
          "type": "boolean",
          "description": "Allow crawling links that point to parent directories"
        },
        "allowExternalLinks": {
          "type": "boolean",
          "description": "Allow crawling links to external domains"
        },
        "webhook": {
          "oneOf": [
            {
              "type": "string",
              "description": "Webhook URL to notify when crawl is complete"
            },
            {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "Webhook URL"
                },
                "headers": {
                  "type": "object",
                  "description": "Custom headers for webhook requests"
                }
              },
              "required": [
                "url"
              ]
            }
          ]
        },
        "deduplicateSimilarURLs": {
          "type": "boolean",
          "description": "Remove similar URLs during crawl"
        },
        "ignoreQueryParameters": {
          "type": "boolean",
          "description": "Ignore query parameters when comparing URLs"
        },
        "scrapeOptions": {
          "type": "object",
          "properties": {
            "formats": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "markdown",
                  "html",
                  "rawHtml",
                  "screenshot",
                  "links",
                  "screenshot@fullPage",
                  "extract"
                ]
              }
            },
            "onlyMainContent": {
              "type": "boolean"
            },
            "includeTags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludeTags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "waitFor": {
              "type": "number"
            }
          },
          "description": "Options for scraping each page"
        }
      },
      "required": [
        "url"
      ]
    }
  },
  "firecrawl_check_crawl_status": {
    "description": "\nCheck the status of a crawl job.\n\n**Usage Example:**\n```json\n{\n  \"name\": \"firecrawl_check_crawl_status\",\n  \"arguments\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\"\n  }\n}\n```\n**Returns:** Status and progress of the crawl job, including results if available.\n",
    "args_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Crawl job ID to check"
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "firecrawl_search": {
    "description": "\nSearch the web and optionally extract content from search results. This is the most powerful search tool available, and if available you should always default to using this tool for any web search needs.\n\n**Best for:** Finding specific information across multiple websites, when you don't know which website has the information; when you need the most relevant content for a query.\n**Not recommended for:** When you already know which website to scrape (use scrape); when you need comprehensive coverage of a single website (use map or crawl).\n**Common mistakes:** Using crawl or map for open-ended questions (use search instead).\n**Prompt Example:** \"Find the latest research papers on AI published in 2023.\"\n**Usage Example:**\n```json\n{\n  \"name\": \"firecrawl_search\",\n  \"arguments\": {\n    \"query\": \"latest AI research papers 2023\",\n    \"limit\": 5,\n    \"lang\": \"en\",\n    \"country\": \"us\",\n    \"scrapeOptions\": {\n      \"formats\": [\"markdown\"],\n      \"onlyMainContent\": true\n    }\n  }\n}\n```\n**Returns:** Array of search results (with optional scraped content).\n",
    "args_schema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Search query string"
        },
        "limit": {
          "type": "number",
          "description": "Maximum number of results to return (default: 5)"
        },
        "lang": {
          "type": "string",
          "description": "Language code for search results (default: en)"
        },
        "country": {
          "type": "string",
          "description": "Country code for search results (default: us)"
        },
        "tbs": {
          "type": "string",
          "description": "Time-based search filter"
        },
        "filter": {
          "type": "string",
          "description": "Search filter"
        },
        "location": {
          "type": "object",
          "properties": {
            "country": {
              "type": "string",
              "description": "Country code for geolocation"
            },
            "languages": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Language codes for content"
            }
          },
          "description": "Location settings for search"
        },
        "scrapeOptions": {
          "type": "object",
          "properties": {
            "formats": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "markdown",
                  "html",
                  "rawHtml"
                ]
              },
              "description": "Content formats to extract from search results"
            },
            "onlyMainContent": {
              "type": "boolean",
              "description": "Extract only the main content from results"
            },
            "waitFor": {
              "type": "number",
              "description": "Time in milliseconds to wait for dynamic content"
            }
          },
          "description": "Options for scraping search results"
        }
      },
      "required": [
        "query"
      ]
    }
  },
  "firecrawl_extract": {
    "description": "\nExtract structured information from web pages using LLM capabilities. Supports both cloud AI and self-hosted LLM extraction.\n\n**Best for:** Extracting specific structured data like prices, names, details.\n**Not recommended for:** When you need the full content of a page (use scrape); when you're not looking for specific structured data.\n**Arguments:**\n- urls: Array of URLs to extract information from\n- prompt: Custom prompt for the LLM extraction\n- systemPrompt: System prompt to guide the LLM\n- schema: JSON schema for structured data extraction\n- allowExternalLinks: Allow extraction from external links\n- enableWebSearch: Enable web search for additional context\n- includeSubdomains: Include subdomains in extraction\n**Prompt Example:** \"Extract the product name, price, and description from these product pages.\"\n**Usage Example:**\n```json\n{\n  \"name\": \"firecrawl_extract\",\n  \"arguments\": {\n    \"urls\": [\"https://example.com/page1\", \"https://example.com/page2\"],\n    \"prompt\": \"Extract product information including name, price, and description\",\n    \"systemPrompt\": \"You are a helpful assistant that extracts product information\",\n    \"schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"price\": { \"type\": \"number\" },\n        \"description\": { \"type\": \"string\" }\n      },\n      \"required\": [\"name\", \"price\"]\n    },\n    \"allowExternalLinks\": false,\n    \"enableWebSearch\": false,\n    \"includeSubdomains\": false\n  }\n}\n```\n**Returns:** Extracted structured data as defined by your schema.\n",
    "args_schema": {
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of URLs to extract information from"
        },
        "prompt": {
          "type": "string",
          "description": "Prompt for the LLM extraction"
        },
        "systemPrompt": {
          "type": "string",
          "description": "System prompt for LLM extraction"
        },
        "schema": {
          "type": "object",
          "description": "JSON schema for structured data extraction"
        },
        "allowExternalLinks": {
          "type": "boolean",
          "description": "Allow extraction from external links"
        },
        "enableWebSearch": {
          "type": "boolean",
          "description": "Enable web search for additional context"
        },
        "includeSubdomains": {
          "type": "boolean",
          "description": "Include subdomains in extraction"
        }
      },
      "required": [
        "urls"
      ]
    }
  },
  "firecrawl_deep_research": {
    "description": "\nConduct deep web research on a query using intelligent crawling, search, and LLM analysis.\n\n**Best for:** Complex research questions requiring multiple sources, in-depth analysis.\n**Not recommended for:** Simple questions that can be answered with a single search; when you need very specific information from a known page (use scrape); when you need results quickly (deep research can take time).\n**Arguments:**\n- query (string, required): The research question or topic to explore.\n- maxDepth (number, optional): Maximum recursive depth for crawling/search (default: 3).\n- timeLimit (number, optional): Time limit in seconds for the research session (default: 120).\n- maxUrls (number, optional): Maximum number of URLs to analyze (default: 50).\n**Prompt Example:** \"Research the environmental impact of electric vehicles versus gasoline vehicles.\"\n**Usage Example:**\n```json\n{\n  \"name\": \"firecrawl_deep_research\",\n  \"arguments\": {\n    \"query\": \"What are the environmental impacts of electric vehicles compared to gasoline vehicles?\",\n    \"maxDepth\": 3,\n    \"timeLimit\": 120,\n    \"maxUrls\": 50\n  }\n}\n```\n**Returns:** Final analysis generated by an LLM based on research. (data.finalAnalysis); may also include structured activities and sources used in the research process.\n",
    "args_schema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The query to research"
        },
        "maxDepth": {
          "type": "number",
          "description": "Maximum depth of research iterations (1-10)"
        },
        "timeLimit": {
          "type": "number",
          "description": "Time limit in seconds (30-300)"
        },
        "maxUrls": {
          "type": "number",
          "description": "Maximum number of URLs to analyze (1-1000)"
        }
      },
      "required": [
        "query"
      ]
    }
  },
  "firecrawl_generate_llmstxt": {
    "description": "\nGenerate a standardized llms.txt (and optionally llms-full.txt) file for a given domain. This file defines how large language models should interact with the site.\n\n**Best for:** Creating machine-readable permission guidelines for AI models.\n**Not recommended for:** General content extraction or research.\n**Arguments:**\n- url (string, required): The base URL of the website to analyze.\n- maxUrls (number, optional): Max number of URLs to include (default: 10).\n- showFullText (boolean, optional): Whether to include llms-full.txt contents in the response.\n**Prompt Example:** \"Generate an LLMs.txt file for example.com.\"\n**Usage Example:**\n```json\n{\n  \"name\": \"firecrawl_generate_llmstxt\",\n  \"arguments\": {\n    \"url\": \"https://example.com\",\n    \"maxUrls\": 20,\n    \"showFullText\": true\n  }\n}\n```\n**Returns:** LLMs.txt file contents (and optionally llms-full.txt).\n",
    "args_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to generate LLMs.txt from"
        },
        "maxUrls": {
          "type": "number",
          "description": "Maximum number of URLs to process (1-100, default: 10)"
        },
        "showFullText": {
          "type": "boolean",
          "description": "Whether to show the full LLMs-full.txt in the response"
        }
      },
      "required": [
        "url"
      ]
    }
  },
  "search_papers": {
    "description": "Search for papers on arXiv with advanced filtering",
    "args_schema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "max_results": {
          "type": "integer"
        },
        "date_from": {
          "type": "string"
        },
        "date_to": {
          "type": "string"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "query"
      ]
    }
  },
  "download_paper": {
    "description": "Download a paper and create a resource for it",
    "args_schema": {
      "type": "object",
      "properties": {
        "paper_id": {
          "type": "string",
          "description": "The arXiv ID of the paper to download"
        },
        "check_status": {
          "type": "boolean",
          "description": "If true, only check conversion status without downloading",
          "default": false
        }
      },
      "required": [
        "paper_id"
      ]
    }
  },
  "list_papers": {
    "description": "List all existing papers available as resources",
    "args_schema": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  "read_paper": {
    "description": "Read the full content of a stored paper in markdown format",
    "args_schema": {
      "type": "object",
      "properties": {
        "paper_id": {
          "type": "string",
          "description": "The arXiv ID of the paper to read"
        }
      },
      "required": [
        "paper_id"
      ]
    }
  },
  "current_time": {
    "description": "Get the current date and time.",
    "args_schema": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "description": "The format of the time, default is empty string",
          "enum": [
            "h:mm A",
            "h:mm:ss A",
            "YYYY-MM-DD HH:mm:ss",
            "YYYY-MM-DD",
            "YYYY-MM",
            "MM/DD/YYYY",
            "MM/DD/YY",
            "YYYY/MM/DD",
            "YYYY/MM"
          ],
          "default": "YYYY-MM-DD HH:mm:ss"
        },
        "timezone": {
          "type": "string",
          "description": "The timezone of the time, IANA timezone name, e.g. Asia/Shanghai"
        }
      },
      "required": [
        "format"
      ]
    }
  },
  "relative_time": {
    "description": "Get the relative time from now.",
    "args_schema": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "description": "The time to get the relative time from now. Format: YYYY-MM-DD HH:mm:ss"
        }
      },
      "required": [
        "time"
      ]
    }
  },
  "days_in_month": {
    "description": "Get the number of days in a month. If no date is provided, get the number of days in the current month.",
    "args_schema": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "description": "The date to get the days in month. Format: YYYY-MM-DD"
        }
      }
    }
  },
  "get_timestamp": {
    "description": "Get the timestamp for the time.",
    "args_schema": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "description": "The time to get the timestamp. Format: YYYY-MM-DD HH:mm:ss"
        }
      }
    }
  },
  "convert_time": {
    "description": "Convert time between timezones.",
    "args_schema": {
      "type": "object",
      "properties": {
        "sourceTimezone": {
          "type": "string",
          "description": "The source timezone. IANA timezone name, e.g. Asia/Shanghai"
        },
        "targetTimezone": {
          "type": "string",
          "description": "The target timezone. IANA timezone name, e.g. Europe/London"
        },
        "time": {
          "type": "string",
          "description": "Date and time in 24-hour format. e.g. 2025-03-23 12:30:00"
        }
      },
      "required": [
        "sourceTimezone",
        "targetTimezone",
        "time"
      ]
    }
  },
  "get_week_year": {
    "description": "Get the week and isoWeek of the year.",
    "args_schema": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "description": "The date to get the week and isoWeek of the year. e.g. 2025-03-23"
        }
      }
    }
  }
}